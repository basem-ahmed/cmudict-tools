#!/usr/bin/python
#
# Tool for processing the CMU Pronunciation Dictionary file formats.
#
# Copyright (C) 2015-2017 Reece H. Dunn
#
# This file is part of cmudict-tools.
#
# cmudict-tools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cmudict-tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cmudict-tools.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import argparse
import textwrap
import csv
import sys
import os

from cmudicttools import cmudict

class HelpWarningsAction(argparse.Action):
	def __init__(self, option_strings, dest, help=None):
		super(HelpWarningsAction, self).__init__(option_strings=option_strings, dest=dest, nargs=0, help=help)

	def __call__(self, parser, namespace, values, option_string=None):
		print('The following values are available for -W:')
		print()
		for warning, help in sorted(cmudict.parser_warnings.items()):
			print('{0: <25}{1}'.format(warning, help))
		print()
		print('If -Wwarn is used, the option is enabled. If -Wno-warn is used, the option')
		print('is disabled.')
		print()
		print('The following values have a special behaviour, and cannot be used with the')
		print('`no-` prefix:')
		print()
		print('{0: <25}{1}'.format('all', 'enable all warnings'))
		print('{0: <25}{1}'.format('none', 'disable all warnings'))
		print()
		print('The order is important, as the warning set is tracked incrementally. This')
		print('allows the following combinations:')
		print()
		print('    -Wnone -Winvalid-phonemes')
		print('        Only use the invalid-phonemes warning.')
		print()
		print('    -Wall -Wno-missing-stress')
		print('        Use all warnings except missing-stress.')
		sys.exit(0)

class WordSelector:
	def __init__(self):
		pass

	def __call__(self, word, context, phonemes, comment, metadata, error):
		return word

class MetadataSelector:
	def __init__(self, key):
		self.key = key

	def __call__(self, word, context, phonemes, comment, metadata, error):
		if not metadata or not self.key in metadata.keys():
			return None
		return metadata[self.key][0]

class OrSelector:
	def __init__(self, selectors):
		self.selectors = selectors

	def __call__(self, word, context, phonemes, comment, metadata, error):
		for selector in self.selectors:
			ret = selector(word, context, phonemes, comment, metadata, error)
			if ret:
				return ret
		return None

def create_selector(selector):
	if '|' in selector:
		return OrSelector([create_selector(s) for s in selector.split('|')])
	if selector.startswith('@'):
		return MetadataSelector(selector[1:])
	if selector == 'word':
		return WordSelector()
	return None

def parse(args):
	parser = cmudict.parse(args.filename, warnings=args.warnings, order_from=args.order_from, accent=args.source_accent, phoneset=args.source_phoneset, encoding=args.input_encoding, syllable_breaks=not args.remove_syllable_breaks, sort_mode=args.sort)
	if args.sort:
		parser = cmudict.sort(parser, args.sort)
	if args.output_context or args.remove_duplicate_contexts:
		parser = cmudict.filter_context_entries(parser, rootdir=os.path.dirname(args.filename), output_context=args.output_context, remove_duplicate_contexts=args.remove_duplicate_contexts)
	if args.remove_context_entries:
		parser = cmudict.remove_context_entries(parser)
	if args.remove_stress:
		parser = cmudict.remove_stress(parser, order_from=args.order_from)
	return parser

def print_dict(args):
	cmudict.format(args.format, parse(args), accent=args.accent, phoneset=args.phoneset, encoding=args.output_encoding, input_encoding=args.input_encoding, output_context=args.output_context, rootdir=os.path.dirname(args.filename))

def statistics(args):
	words    = 0
	variants = 0
	entries  = 0
	prev_word = None
	for word, context, phonemes, comment, metadata, error in parse(args):
		if error:
			print(error, file=sys.stderr)
		if word:
			entries = entries + 1
		if context:
			variants = variants + 1
		if not error and word != prev_word:
			words = words + 1
			prev_word = word
	print('Entries:  {0}'.format(entries))
	print('Words:    {0}'.format(words))
	print('Variants: {0}'.format(variants))

def validate(args):
	for word, context, phonemes, comment, metadata, error in parse(args):
		if error:
			print(error, file=sys.stderr)

def select(args):
	selector = create_selector(args.select)
	if not selector:
		print('error: unknown select expression: `{0}`'.format(args.select))
		return
	for word, context, phonemes, comment, metadata, error in parse(args):
		if not error:
			value = selector(word, context, phonemes, comment, metadata, error)
			if value != None:
				print(value)

def diff(args):
	if args.filename:
		cmudict.diff(args.filename, None, None, encoding=args.input_encoding)
	else:
		cmudict.diff(args.yours, args.theirs, args.base, encoding=args.input_encoding)

def merge(args):
	if args.filename:
		cmudict.merge(args.filename, None, None, encoding=args.input_encoding)
	else:
		cmudict.merge(args.yours, args.theirs, args.base, encoding=args.input_encoding)

commands = {
	'stats':    statistics,
	'validate': validate,
	'print':    print_dict,
	'select':   select,
	'diff':     diff,
	'merge':    merge,
}

formats = list(cmudict.dict_formats.keys())
formats.extend(['json'])

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent("""\
        A helper program for working with the CMU Pronunciation Dictionary.

        commands:
          diff                  Perform a diff on the dictionary.
          merge                 Perform a merge on the dictionary.
          print                 Format and optionally sort the dictionary.
          select=SELECTOR       Select the item corresponding to SELECTOR.
          stats                 Display dictionary statistics.
          validate              Only perform validation checks.

        positional arguments:
          dictionary            The dictionary to process.
          yours                 The source dictionary to diff/merge.
          theirs                The target dictionary to diff/merge.
          base                  The common ancestor to yours and theirs."""),
    usage=textwrap.dedent("""\
        %(prog)s [option..] command dictionary
               %(prog)s [option..] command yours theirs
               %(prog)s [option..] command yours theirs base"""))
parser.add_argument('-W', dest='warnings', action='append', metavar='WARNING', default=[], help='Configure the validation checks to perform.')
parser.add_argument('--source-accent', default=None, help='The accent to process the dictionary pronunciation in.')
parser.add_argument('--source-phoneset', default=None, help='The phoneset used by the dictionary pronunciations.')
parser.add_argument('--accent', default=None, help='The accent to print the pronunciations in.')
parser.add_argument('--phoneset', default=None, help='The phoneset used to print the pronunciations.')
parser.add_argument('--format', default='cmudict', choices=formats, help='The format to output the dictionary in.')
parser.add_argument('--sort', default='none', choices=['air', 'none', 'unicode', 'weide'], help='How the entries are sorted in the output.')
parser.add_argument('--order-from', default=0, type=int, help='The number to start variants at.')
parser.add_argument('--help-warnings', action=HelpWarningsAction, help='List the available validation warnings.')
parser.add_argument('--input-encoding', default='windows-1252', help='The encoding of the dictionary file.')
parser.add_argument('--output-encoding', default=None, help='The encoding to print the entries in.')
parser.add_argument('--output-context', default=None, help='The context format to convert to.')
parser.add_argument('--remove-context-entries', default=False, action='store_true', help='Ignore entries with a context specified.')
parser.add_argument('--remove-duplicate-contexts', default=False, action='store_true', help='Remove entries with the same context for a given word, keeping the first context entry.')
parser.add_argument('--remove-syllable-breaks', default=False, action='store_true', help='Remove syllable break markers from pronunciations.')
parser.add_argument('--remove-stress', default=False, action='store_true', help='Remove stress markers from pronunciations.')
parser.add_argument('command', help=argparse.SUPPRESS)
parser.add_argument('files', nargs='+', help=argparse.SUPPRESS)
args = parser.parse_args()

if args.sort == 'none':
	args.sort = None

if len(args.files) == 1:
	args.filename = args.files[0]
elif args.command in ['diff', 'merge']:
	args.filename = None
	if len(args.files) == 2:
		args.yours  = args.files[0]
		args.theirs = args.files[1]
		args.base   = None
	elif len(args.files) == 3:
		args.yours  = args.files[0]
		args.theirs = args.files[1]
		args.base   = args.files[2]
	else:
		parser.print_help()
		sys.exit(1)
else:
	parser.print_help()
	sys.exit(1)

try:
	if args.command.startswith('select='):
		args.select = args.command[7:]
		args.command = 'select'
	commands[args.command](args)
except cmudict.InvalidWarning as e:
	print(e)
